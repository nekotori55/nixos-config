# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  powerManagement.enable = true;

  powerManagement.powertop.enable = true;

  boot.loader = {
    grub = {
      enable = true;
      device = "nodev";
      efiSupport = true;
      useOSProber = true;
    };
    efi.canTouchEfiVariables = true;
  };

  boot.initrd.availableKernelModules = [
    "ahci"
    "xhci_pci"
    "sd_mod"
    "sdhci_pci"
    "rtsx_usb_sdmmc"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/0e776749-b0ac-4201-8869-d1a8cdc802bd";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/6462-890A";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/67422972-fdcd-42fb-b6dc-cd90c66dea82"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  networking.hostName = "pancake";
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };

  # boot.extraModprobeConfig = "options snd-hda-intel power_save=0 power_save_controller=N";

  services.pipewire.wireplumber.extraConfig.bluetoothEnhancements = {
    "monitor.bluez.properties" = {
      "bluez5.hfphsp-backend" = "none";
      "bluez5.enable-sbc-xq" = true;
      "bluez5.enable-msbc" = true;
      "bluez5.enable-hw-volume" = true;
      "bluez5.roles" = [
        "a2dp_sink"
        "a2dp_source"
      ];
      # "10-disable-camera" = {
      #   "wireplumber.profiles" = {
      #     main."monitor.libcamera" = "disabled";
      #   };
      # };
    };
  };

  hardware.bluetooth = {
    enable = true;
    # powerOnBoot = lib.mkDefault false;
    hsphfpd.enable = false;
  };
  services.blueman.enable = true;

  # FIX ZONE

  boot = {
    # CRITICAL: Force the use of deep sleep (S3) instead of modern standby (s2idle)
    kernelParams = [
      "mem_sleep_default=deep"
      # Enable Intel IOMMU if needed for security, but not directly for sleep
      # "intel_iommu=on"
      # Force PCIe ASPM to manage power states aggressively
      "pcie_aspm=force"
    ];

    # BLACKLIST problematic kernel modules
    # Common culprits: ISH sensor hub, buggy wireless drivers
    blacklistedKernelModules = [
      "ish_hid" # Integrated Sensor Hub (common cause of sleep failures)
      # "acpi_call" # Only blacklist if you tested and it causes issues
    ];
  };

  services = {
    # Ensure TLP is installed and configured for power savings
    # (often more effective on laptops than default settings)
    tlp = {
      enable = true;
      settings = {
        # Refer to TLP documentation for optimal settings for your hardware
        CPU_SCALING_GOVERNOR_ON_AC = "performance";
        CPU_SCALING_GOVERNOR_ON_BAT = "powersave";
      };
    };

    # This service handles lid close events. Critical for laptops.
    logind = {
      lidSwitch = "suspend-then-hibernate"; # or "suspend"
      lidSwitchExternalPower = "suspend"; # suspend on AC when lid closed
      # extraConfig = ''...''; # Optional manual settings
    };
  };

  # HARDWARE-SPECIFIC TWEAKS
  # Enable support for CPU frequency scaling

  # SYSTEMD SERVICE TO FIX WAKEUP SOURCES
  # This script runs at boot to ensure the lid and USB can wake the system.
  # The exact device names (LID0, XHC) can be found in /proc/acpi/wakeup
  systemd.services.set-wakeup-devices = {
    description = "Configure ACPI wakeup devices";
    wantedBy = [ "multi-user.target" ];
    serviceConfig = {
      Type = "oneshot";
      ExecStart =
        let
          wakeupScript = pkgs.writeShellScriptBin "set-wakeup" ''
            echo LID0 > /proc/acpi/wakeup   # Enable lid to wake
            echo XHC > /proc/acpi/wakeup    # Enable USB controller to wake
            # echo PEG0 > /proc/acpi/wakeup # Example for PCIe graphics
          '';
        in
        "${wakeupScript}/bin/set-wakeup";
      RemainAfterExit = true;
    };
  };

  # Enable necessary firmware for your hardware (WiFi, Bluetooth, etc.)
  hardware.enableRedistributableFirmware = true;

}
